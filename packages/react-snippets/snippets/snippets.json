{
  "import React": {
    "prefix": "rim",
    "body": "import React from 'react';$0",
    "description": "Import only React from React module."
  },
  "import React, {Component}": {
    "prefix": "ric",
    "body": "import React, { Component } from 'react';$0",
    "description": "Import React and Component from React module."
  },
  "import PropTypes": {
    "prefix": "ript",
    "body": "import PropTypes from 'prop-types';$0",
    "description": "Imports PropTypes from prop-types module."
  },
  "functional component": {
    "prefix": "rc",
    "body": "const ${1:componentName} = ({}) => (\n\t${2:<div></div>}\n);\n$0",
    "description": "Stand-along functional component"
  },
  "class Component": {
    "name": "class component",
    "prefix": "rcc",
    "body": "class ${1:componentName} extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n}\n$0",
    "description": "Stand-alone component class"
  },
  "default component constructor": {
    "prefix": "rcc",
    "body": "constructor(props) {\n\tsuper(props);\n\t$1\n}\n\n$0",
    "description": "Component constructor with props."
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$1\n}\n\n$0",
    "description": "Invoked once; immediately after the initial rendering occurs."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$1\n}\n\n$0",
    "description": "Invoked before rendering when new props or state are being received; used to indicate whether the component has changed due to new props or state."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$1\n}\n\n$0",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwum",
    "body": "componentWillUnmount() {\n\t$1\n}\n\n$0",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "bound component class method": {
    "prefix": "cm",
    "body": "${1:methodName} = () => ${1:{\n\t}\n};\n\n$0",
    "description": "class bound method"
  },
  "set state": {
    "prefix": "sst",
    "body": "this.setState({$1});\n$0",
    "description": "Performs a shallow merge of nextState into current state."
  },
  "set state w/ function": {
    "prefix": "ssf",
    "body": "this.setState(state => ${1:({\n\t})});\n\n$0",
    "description": "Performs a shallow merge of nextState into current state."
  },
  "destructure class props": {
    "prefix": "cdp",
    "body": "const {\n\t$1\n} = this.props;\n$0",
    "description": "Destructure component's props."
  },
  "destructure class state": {
    "prefix": "cds",
    "body": "const {\n\t$1\n} = this.state;\n$0",
    "description": "Destructure component's state."
  },
  "bind method to class": {
    "prefix": "cbind",
    "body": "this.$1 = this.$1.bind(this);\n$0",
    "description": "Binds the this of a method; used inside the constructor."
  },
  "default props": {
    "prefix": "cdp",
    "body": "$1.defaultProps = {\n\t$2\n};\n$0",
    "description": "Creates empty defaultProps declaration."
  },
  "propType required": {
    "prefix": "ptr",
    "body": "isRequired,\n",
    "description": "Required prop type."
  },
  "propType array": {
    "prefix": "pta",
    "body": "PropTypes.array${2:,\n}$0",
    "description": "Array prop type."
  },
  "propType array of": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($1)${2:,\n}$0",
    "description": "Array prop type."
  },
  "propType bool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,\n$0",
    "description": "Bool prop type."
  },
  "propType func": {
    "prefix": "ptf",
    "body": "PropTypes.func${1:,\n}$0",
    "description": "Func prop type."
  },
  "propType number": {
    "prefix": "ptnum",
    "body": "PropTypes.number${1:,\n}$0",
    "description": "Number prop type"
  },
  "propType object": {
    "prefix": "pto",
    "body": "PropTypes.object${1:,\n}$0",
    "description": "Object prop type."
  },
  "propType string": {
    "prefix": "pts",
    "body": "PropTypes.string${1:,\n}$0",
    "description": "String prop type."
  },
  "propType node": {
    "prefix": "ptn",
    "body": "PropTypes.node${1:,\n}$0",
    "description": "Anything that can be rendered: numbers, strings, elements or an array."
  },
  "propType element": {
    "prefix": "ptel",
    "body": "PropTypes.element${1:,\n}$0",
    "description": "React element prop type."
  },
  "propType instanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($1)${2:,\n}$0",
    "description": "Is an instance of a class prop type."
  },
  "propType enum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf([$1])${2:,\n}$0",
    "description": "Prop type limited to specific values by treating it as an enum."
  },
  "propType one of type": {
    "prefix": "ptot",
    "body": "PropTypes.oneOfType([$1])${2:,\n}$0",
    "description": "An object that could be one of many types."
  },
  "propType shape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({$1})${2:,\n}${0}",
    "description": "An object taking on a particular shape."
  },
  "ref": {
    "prefix": "cref",
    "body": "const ${1:ref} = createRef();\n$0"
  }
}
