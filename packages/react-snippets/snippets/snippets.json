{
  "import React": {
    "prefix": "imr",
    "body": "import React from 'react';$0",
    "description": "Import only React from React module."
  },
  "import React, {Component}": {
    "prefix": "imrc",
    "body": "import React, { Component } from 'react';$0",
    "description": "Import React and Component from React module."
  },
  "import PropTypes": {
    "prefix": "impt",
    "body": "import PropTypes from 'prop-types';$0",
    "description": "Imports PropTypes from prop-types module."
  },
  "all inclusive functional component": {
    "prefix": "nrc",
    "body":
      "import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst ${1:componentName} = ({}) => (\n\t${0:<div></div>}\n);\n\n${1:componentName}.propTypes = {};\n\nexport default ${1:componentName};",
    "description":
      "Creates a new stateless functional component; imports, definition, propTypes, and export."
  },
  "all inclusive class component": {
    "prefix": "nrcc",
    "body":
      "import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass ${1:componentName} extends Component {\n\tconstructor(props, ...rest) {\n\t\tsuper(props, ...rest);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t${0:<div></div>}\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {};\n\nexport default ${1:componentName};",
    "description":
      "Creates a component class; imports, definition, propTypes, and export."
  },
  "just functional component": {
    "prefix": "rc",
    "body":
      "const ${1:componentName} = ({}) => (\n\t${2:<div></div>}\n);\n\n${1:componentName}.propTypes = {};\n$0",
    "description": "Stand-along functional component"
  },
  "just class Component": {
    "name": "class component",
    "prefix": "rcc",
    "body":
      "class ${1:componentName} extends Component {\n\tconstructor(props, ...rest) {\n\t\tsuper(props, ...rest);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {};\n$0",
    "description": "Stand-alone component class"
  },
  "default component constructor": {
    "prefix": "ccon",
    "body":
      "constructor(props, ...rest) {\n\tsuper(props, ...rest);\n\t$1\n}$0",
    "description": "Component constructor with props."
  },
  "constructor; props and context": {
    "prefix": "cconc",
    "body":
      "constructor(props, context, ...rest) {\n\tsuper(props, context, ...rest);\n\t$1\n}$0",
    "description": "Component constructor with props and context."
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "componentWillMount() {\n\t$0\n}",
    "description":
      "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}",
    "description":
      "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps(nextProps) {\n\t$0\n}",
    "description":
      "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}",
    "description":
      "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}",
    "description":
      "Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}",
    "description":
      "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwum",
    "body": "componentWillUnmount() {\n\t$0\n}",
    "description":
      "Invoked immediately before a component is unmounted from the DOM."
  },
  "bound component class method": {
    "prefix": "ccm",
    "body": "${1:methodName} = () => {\n\t$0\n};",
    "description": "class bound method"
  },
  "set state": {
    "prefix": "sst",
    "body": "this.setState({\n\t$1\n});\n$0",
    "description": "Performs a shallow merge of nextState into current state."
  },
  "set state w/ function": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => ({\n\t$1\n}));\n$0",
    "description": "Performs a shallow merge of nextState into current state."
  },
  "destructure class props": {
    "prefix": "cdp",
    "body": "const {\n\t$1\n} = this.props;\n$0",
    "description": "Destructure component's props."
  },
  "destructure class state": {
    "prefix": "cds",
    "body": "const {\n\t$1\n} = this.state;\n$0",
    "description": "Destructure component's state."
  },
  "bind method to class": {
    "prefix": "cbnd",
    "body": "this.$1 = this.$1.bind(this);\n$0",
    "description":
      "Binds the this of a method. To be used inside a constructor."
  },
  "default props": {
    "prefix": "rdp",
    "body": "$1.defaultProps = {\n\t$2\n};\n$0",
    "description": "Creates empty defaultProps declaration."
  },
  "propType array": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type."
  },
  "propType array required": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required."
  },
  "propType bool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type."
  },
  "propType bool required": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required."
  },
  "propType func": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type."
  },
  "propType func required": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required."
  },
  "propType number": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propType number required": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propType object": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type."
  },
  "propType object required": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required."
  },
  "propType string": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type."
  },
  "propTypes string required": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required."
  },
  "propType node": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description":
      "Anything that can be rendered: numbers, strings, elements or an array."
  },
  "propType node required": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description":
      "Anything that can be rendered: numbers, strings, elements or an array required."
  },
  "propType element": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type."
  },
  "propType element required": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required."
  },
  "propType instanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type."
  },
  "propType instanceOf required": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required."
  },
  "propType enum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description":
      "Prop type limited to specific values by treating it as an enum."
  },
  "propType enum required": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description":
      "Prop type limited to specific values by treating it as an enum required."
  },
  "propType one of type": {
    "prefix": "ptot",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types."
  },
  "propType one of type required": {
    "prefix": "ptotr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required."
  },
  "propType array of": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type."
  },
  "propType array of required": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required."
  },
  "propType object of": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type."
  },
  "propType object of required": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required."
  },
  "propType shape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape."
  },
  "propType shape required": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required."
  },
  "higher order component": {
    "prefix": "hoc",
    "body":
      "C => {\n\treturn class extends Component {\n\t\tconstructor(...rest) {\n\t\t\tsuper(rest);\n\t}\n\n\t\trender() {\n\t\t\t$0return <C {...this.props} />;\n\t\t}\n\t};\n}",
    "description": "basic higher order component function"
  },
  "ref": {
    "prefix": "cref",
    "body": "ref={(el) => {\n\tthis.$1 = el;\n}}\n"
  }
}
