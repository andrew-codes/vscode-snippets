{
  "importReact": {
    "name": "import react",
    "prefix": "imr",
    "body": "import React from 'react';\n$0",
    "description": "Import only React from React module."
  },
  "importReactAndComponent": {
    "name": "import react and component",
    "prefix": "imrc",
    "body": "import React, { Component } from 'react';\n$0",
    "description": "Import React and Component from React module."
  },
  "importPropTypes": {
    "name": "import prop types",
    "prefix": "impt",
    "body": "import PropTypes from 'prop-types';\n$0",
    "description": "Imports PropTypes from prop-types module."
  },
  "newReactComponent": {
    "name": "new component file",
    "prefix": "nrc",
    "body":
      "import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst ${1:componentName} = ({}) => (\n\t<div>\n\t\t$0\n\t</div>\n);\n\n${1:componentName}.propTypes = {};\n\nexport default ${1:componentName};",
    "description":
      "Creates a new stateless functional component; imports, definition, propTypes, and export."
  },
  "newReactComponentClass": {
    "name": "new component class file",
    "prefix": "nrcc",
    "body":
      "import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass ${1:componentName} extends Component {\n\tconstructor(props, ...rest) {\n\t\tsuper(props, ...rest);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {};\n\nexport default ${1:componentName};",
    "description":
      "Creates a component class; imports, definition, propTypes, and export."
  },
  "reactClassComponent": {
    "name": "class component",
    "prefix": "rcc",
    "body":
      "class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n",
    "description": "Stand-alone component class"
  },
  "classConstructor": {
    "name": "props constructor",
    "prefix": "ccon",
    "body":
      "constructor(props, ...rest) {\n\tsuper(props, ...rest);\n\t$0\n}\n",
    "description": "Component constructor with props."
  },
  "classConstructorContext": {
    "name": "props, context constructor",
    "prefix": "cconc",
    "body":
      "constructor(props, context, ...rest) {\n\tsuper(props, context, ..rest);\n\t$0\n}\n",
    "description": "Component constructor with props and context."
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount() {\n\t$0\n}\n",
    "description":
      "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "\ncomponentDidMount() {\n\t$0\n}\n",
    "description":
      "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "\ncomponentWillReceiveProps(nextProps) {\n\t$0\n}\n",
    "description":
      "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "\nshouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description":
      "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "\ncomponentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description":
      "Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "\ncomponentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description":
      "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwum",
    "body": "\ncomponentWillUnmount() {\n\t$0\n}\n",
    "description":
      "Invoked immediately before a component is unmounted from the DOM."
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState({\n\t$1\n});\n$0",
    "description": "Performs a shallow merge of nextState into current state."
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => ({\n\t$1\n}));\n$0",
    "description": "Performs a shallow merge of nextState into current state."
  },
  "destructureComponentProps": {
    "prefix": "cdp",
    "body": "const {\n\t$1\n} = this.props;\n$0",
    "description": "Destructure component's props."
  },
  "destructureComponentState": {
    "prefix": "state",
    "body": "const {\n\t$1\n} = this.state;\n$0",
    "description": "Destructure component's state."
  },
  "classBindThis": {
    "prefix": "cbnd",
    "body": "this.$1 = this.$1.bind(this);\n$0",
    "description":
      "Binds the this of a method. To be used inside a constructor."
  },
  "defaultProps": {
    "prefix": "rdp",
    "body": "$1.defaultProps = {\n\t$2\n};\n$0",
    "description": "Creates empty defaultProps declaration."
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type."
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required."
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type."
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required."
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type."
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required."
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type."
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required."
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type."
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required."
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description":
      "Anything that can be rendered: numbers, strings, elements or an array."
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description":
      "Anything that can be rendered: numbers, strings, elements or an array required."
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type."
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required."
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type."
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required."
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description":
      "Prop type limited to specific values by treating it as an enum."
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description":
      "Prop type limited to specific values by treating it as an enum required."
  },
  "propTypeOneOfType": {
    "prefix": "ptot",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types."
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptotr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required."
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type."
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required."
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type."
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required."
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape."
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required."
  }
}
